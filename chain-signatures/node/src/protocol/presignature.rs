use super::message::{MessageChannel, PresignatureMessage};
use super::state::RunningState;
use super::triple::{Triple, TripleId, TripleManager};
use crate::protocol::contract::primitives::intersect_vec;
use crate::protocol::error::GenerationError;
use crate::storage::presignature_storage::PresignatureStorage;
use crate::types::{PresignatureProtocol, SecretKeyShare};
use crate::util::AffinePointExt;

use cait_sith::protocol::{Action, InitializationError, Participant, ProtocolError};
use cait_sith::{KeygenOutput, PresignArguments, PresignOutput};
use chrono::Utc;
use k256::{AffinePoint, Scalar, Secp256k1};
use mpc_contract::config::ProtocolConfig;
use mpc_crypto::PublicKey;
use serde::ser::SerializeStruct;
use serde::{Deserialize, Serialize};
use sha3::{Digest, Sha3_256};
use std::collections::hash_map::Entry;
use std::collections::{HashMap, HashSet};
use std::time::{Duration, Instant};

use near_account_id::AccountId;

/// Unique number used to identify a specific ongoing presignature generation protocol.
/// Without `PresignatureId` it would be unclear where to route incoming cait-sith presignature
/// generation messages.
pub type PresignatureId = u64;

/// A completed presignature.
pub struct Presignature {
    pub id: PresignatureId,
    pub output: PresignOutput<Secp256k1>,
    pub participants: Vec<Participant>,
}

impl Serialize for Presignature {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        let mut state = serializer.serialize_struct("Presignature", 5)?;
        state.serialize_field("id", &self.id)?;
        state.serialize_field("output_big_r", &self.output.big_r)?;
        state.serialize_field("output_k", &self.output.k)?;
        state.serialize_field("output_sigma", &self.output.sigma)?;
        state.serialize_field("participants", &self.participants)?;
        state.end()
    }
}

impl<'de> Deserialize<'de> for Presignature {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        #[derive(Deserialize)]
        struct PresignatureFields {
            id: PresignatureId,
            output_big_r: AffinePoint,
            output_k: Scalar,
            output_sigma: Scalar,
            participants: Vec<Participant>,
        }

        let fields = PresignatureFields::deserialize(deserializer)?;

        Ok(Self {
            id: fields.id,
            output: PresignOutput {
                big_r: fields.output_big_r,
                k: fields.output_k,
                sigma: fields.output_sigma,
            },
            participants: fields.participants,
        })
    }
}

/// An ongoing presignature generator.
pub struct PresignatureGenerator {
    pub participants: Vec<Participant>,
    pub protocol: PresignatureProtocol,
    pub triple0: TripleId,
    pub triple1: TripleId,
    pub mine: bool,
    pub timestamp: Instant,
    pub timeout: Duration,
}

impl PresignatureGenerator {
    pub fn new(
        protocol: PresignatureProtocol,
        participants: &[Participant],
        triple0: TripleId,
        triple1: TripleId,
        mine: bool,
        timeout: u64,
    ) -> Self {
        Self {
            protocol,
            participants: participants.to_vec(),
            triple0,
            triple1,
            mine,
            timestamp: Instant::now(),
            timeout: Duration::from_millis(timeout),
        }
    }

    pub fn poke(&mut self) -> Result<Action<PresignOutput<Secp256k1>>, ProtocolError> {
        if self.timestamp.elapsed() > self.timeout {
            let id = hash_as_id(self.triple0, self.triple1);
            tracing::warn!(
                presignature_id = id,
                self.triple0,
                self.triple1,
                self.mine,
                "presignature protocol timed out"
            );
            return Err(ProtocolError::Other(
                anyhow::anyhow!("presignature protocol timed out").into(),
            ));
        }

        self.protocol.poke()
    }
}

/// Abstracts how triples are generated by providing a way to request a new triple that will be
/// complete some time in the future and a way to take an already generated triple.
pub struct PresignatureManager {
    presignature_storage: PresignatureStorage,
    /// Ongoing presignature generation protocols.
    generators: HashMap<PresignatureId, PresignatureGenerator>,
    /// The set of presignatures that were introduced to the system by the current node.
    introduced: HashSet<PresignatureId>,
    me: Participant,
    threshold: usize,
    epoch: u64,
    my_account_id: AccountId,
    msg: MessageChannel,
}

impl PresignatureManager {
    pub fn new(
        me: Participant,
        threshold: usize,
        epoch: u64,
        my_account_id: &AccountId,
        storage: &PresignatureStorage,
        msg: MessageChannel,
    ) -> Self {
        Self {
            presignature_storage: storage.clone(),
            generators: HashMap::new(),
            introduced: HashSet::new(),
            me,
            threshold,
            epoch,
            my_account_id: my_account_id.clone(),
            msg,
        }
    }

    pub async fn insert(&mut self, presignature: Presignature, mine: bool, back: bool) {
        let id = presignature.id;
        tracing::debug!(id, mine, "inserting presignature");
        if let Err(store_err) = self
            .presignature_storage
            .insert(presignature, mine, back)
            .await
        {
            tracing::error!(?store_err, mine, "failed to insert presignature");
        }
    }

    /// Returns true if the presignature with the given id is already generated
    pub async fn contains(&self, id: &PresignatureId) -> bool {
        self.presignature_storage
            .contains(id)
            .await
            .map_err(|e| {
                tracing::warn!(?e, "failed to check if presignature exist");
            })
            .unwrap_or(false)
    }

    /// Returns true if the mine presignature with the given id is already generated
    pub async fn contains_mine(&self, id: &PresignatureId) -> bool {
        self.presignature_storage
            .contains_mine(id)
            .await
            .map_err(|e| {
                tracing::warn!(?e, "failed to check if mine presignature exist");
            })
            .unwrap_or(false)
    }

    pub async fn contains_used(&self, id: &PresignatureId) -> bool {
        self.presignature_storage
            .contains_used(id)
            .await
            .map_err(|e| tracing::warn!(?e, "failed to check if presignature is used"))
            .unwrap_or(false)
    }

    pub async fn take(&mut self, id: PresignatureId) -> Result<Presignature, GenerationError> {
        let presignature = self
            .presignature_storage
            .take(&id)
            .await
            .map_err(|store_err| {
                if self.generators.contains_key(&id) {
                    tracing::warn!(id, ?store_err, "presignature is still generating");
                    GenerationError::PresignatureIsGenerating(id)
                } else {
                    tracing::warn!(id, ?store_err, "presignature is missing");
                    GenerationError::PresignatureIsMissing(id)
                }
            })?;

        tracing::debug!(id, "took presignature");
        Ok(presignature)
    }

    pub async fn take_mine(&mut self) -> Option<Presignature> {
        let presignature = self
            .presignature_storage
            .take_mine()
            .await
            .map_err(|store_error| {
                tracing::error!(?store_error, "failed to look for mine presignature");
            })
            .ok()??;
        tracing::debug!(id = ?presignature.id, "took presignature of mine");
        Some(presignature)
    }

    /// Returns the number of unspent presignatures available in the manager.
    pub async fn len_generated(&self) -> usize {
        self.presignature_storage
            .len_generated()
            .await
            .map_err(|e| {
                tracing::error!(?e, "failed to count all presignatures");
            })
            .unwrap_or(0)
    }

    /// Returns the number of unspent presignatures assigned to this node.
    pub async fn len_mine(&self) -> usize {
        self.presignature_storage
            .len_mine()
            .await
            .map_err(|e| {
                tracing::error!(?e, "failed to count mine presignatures");
            })
            .unwrap_or(0)
    }

    /// Returns if there are unspent presignatures available in the manager.
    pub async fn is_empty(&self) -> bool {
        self.len_generated().await == 0
    }

    /// Returns the number of unspent presignatures we will have in the manager once
    /// all ongoing generation protocols complete.
    pub async fn len_potential(&self) -> usize {
        let complete_presignatures = self.len_generated().await;
        let ongoing_generators = self.generators.len();
        complete_presignatures + ongoing_generators
    }

    #[allow(clippy::too_many_arguments)]
    fn generate_internal(
        participants: &[Participant],
        me: Participant,
        threshold: usize,
        triple0: Triple,
        triple1: Triple,
        public_key: &PublicKey,
        private_share: &SecretKeyShare,
        mine: bool,
        timeout: u64,
    ) -> Result<PresignatureGenerator, InitializationError> {
        let protocol = Box::new(cait_sith::presign(
            participants,
            me,
            // These paramaters appear to be to make it easier to use different indexing schemes for triples
            // Introduced in this PR https://github.com/LIT-Protocol/cait-sith/pull/7
            participants,
            me,
            PresignArguments {
                triple0: (triple0.share, triple0.public),
                triple1: (triple1.share, triple1.public),
                keygen_out: KeygenOutput {
                    private_share: *private_share,
                    public_key: *public_key,
                },
                threshold,
            },
        )?);
        Ok(PresignatureGenerator::new(
            protocol,
            participants,
            triple0.id,
            triple1.id,
            mine,
            timeout,
        ))
    }

    /// Starts a new presignature generation protocol.
    pub async fn generate(
        &mut self,
        participants: &[Participant],
        triple0: Triple,
        triple1: Triple,
        public_key: &PublicKey,
        private_share: &SecretKeyShare,
        timeout: u64,
    ) -> Result<(), InitializationError> {
        let id = hash_as_id(triple0.id, triple1.id);

        // Check if the `id` is already in the system. Error out and have the next cycle try again.
        if self.generators.contains_key(&id) || self.contains(&id).await {
            tracing::warn!(id, "presignature id collision");
            return Err(InitializationError::BadParameters(format!(
                "id collision: presignature_id={id}"
            )));
        }

        tracing::info!(
            id,
            triple0 = triple0.id,
            triple1 = triple1.id,
            "starting protocol to generate a new presignature"
        );
        let generator = Self::generate_internal(
            participants,
            self.me,
            self.threshold,
            triple0,
            triple1,
            public_key,
            private_share,
            true,
            timeout,
        )?;
        self.generators.insert(id, generator);
        self.introduced.insert(id);
        crate::metrics::NUM_TOTAL_HISTORICAL_PRESIGNATURE_GENERATORS
            .with_label_values(&[self.my_account_id.as_str()])
            .inc();
        crate::metrics::NUM_TOTAL_HISTORICAL_PRESIGNATURE_GENERATORS_MINE
            .with_label_values(&[self.my_account_id.as_str()])
            .inc();
        Ok(())
    }

    pub async fn stockpile(
        &mut self,
        active: &[Participant],
        pk: &PublicKey,
        sk_share: &SecretKeyShare,
        triple_manager: &TripleManager,
        cfg: &ProtocolConfig,
    ) -> Result<(), InitializationError> {
        let not_enough_presignatures = {
            // Stopgap to prevent too many presignatures in the system. This should be around min_presig*nodes*2
            // for good measure so that we have enough presignatures to do sig generation while also maintain
            // the minimum number of presignature where a single node can't flood the system.
            if self.len_potential().await >= cfg.presignature.max_presignatures as usize {
                false
            } else {
                // We will always try to generate a new triple if we have less than the minimum
                self.len_mine().await < cfg.presignature.min_presignatures as usize
                    && self.introduced.len() < cfg.max_concurrent_introduction as usize
                    && self.generators.len() < cfg.max_concurrent_generation as usize
            }
        };

        if not_enough_presignatures {
            tracing::debug!("not enough presignatures, generating");
            // To ensure there is no contention between different nodes we are only using triples
            // that we proposed. This way in a non-BFT environment we are guaranteed to never try
            // to use the same triple as any other node.
            if let Some((triple0, triple1)) = triple_manager.take_two_mine().await {
                let presig_participants = intersect_vec(&[
                    active,
                    &triple0.public.participants,
                    &triple1.public.participants,
                ]);
                if presig_participants.len() < self.threshold {
                    tracing::warn!(
                        participants = ?presig_participants,
                        "running: the intersection of participants is less than the threshold"
                    );
                    // TODO: do not insert back triples when we have a clear model for data consistency
                    // between nodes and utilizing only triples that meet threshold requirements.
                    triple_manager.insert(triple0, true, true).await;
                    triple_manager.insert(triple1, true, true).await;
                } else {
                    self.generate(
                        &presig_participants,
                        triple0,
                        triple1,
                        pk,
                        sk_share,
                        cfg.presignature.generation_timeout,
                    )
                    .await?;
                }
            }
        }

        Ok(())
    }

    /// Ensures that the presignature with the given id is either:
    /// 1) Already generated in which case returns `None`, or
    /// 2) Is currently being generated by `protocol` in which case returns `Some(protocol)`, or
    /// 3) Has never been seen by the manager in which case start a new protocol and returns `Some(protocol)`, or
    /// 4) Depends on triples (`triple0`/`triple1`) that are unknown to the node
    // TODO: What if the presignature completed generation and is already spent?
    #[allow(clippy::too_many_arguments)]
    pub async fn get_or_start_generation(
        &mut self,
        participants: &[Participant],
        id: PresignatureId,
        triple0: TripleId,
        triple1: TripleId,
        triple_manager: &TripleManager,
        public_key: &PublicKey,
        private_share: &SecretKeyShare,
        cfg: &ProtocolConfig,
    ) -> Result<&mut PresignatureProtocol, GenerationError> {
        if id != hash_as_id(triple0, triple1) {
            tracing::error!(id, "presignature id does not match the expected hash");
            Err(GenerationError::PresignatureBadParameters)
        } else if self.contains(&id).await {
            tracing::debug!(id, "presignature already generated");
            Err(GenerationError::AlreadyGenerated)
        } else {
            match self.generators.entry(id) {
                Entry::Vacant(entry) => {
                    tracing::info!(id, "joining protocol to generate a new presignature");
                    let (triple0, triple1) = match triple_manager.take_two(triple0, triple1).await {
                        Ok(result) => result,
                        Err(error) => match error {
                            GenerationError::TripleIsGenerating(_) => {
                                tracing::warn!(
                                    ?error,
                                    id,
                                    triple0,
                                    triple1,
                                    "could not initiate non-introduced presignature: one triple is generating"
                                );
                                return Err(error);
                            }
                            GenerationError::TripleStoreError(_) => {
                                tracing::warn!(
                                    ?error,
                                    id,
                                    triple0,
                                    triple1,
                                    "could not initiate non-introduced presignature: triple store error"
                                );
                                return Err(error);
                            }
                            _ => {
                                tracing::error!(?error, "Unexpected Generation Error");
                                return Err(error);
                            }
                        },
                    };
                    let generator = Self::generate_internal(
                        participants,
                        self.me,
                        self.threshold,
                        triple0,
                        triple1,
                        public_key,
                        private_share,
                        false,
                        cfg.presignature.generation_timeout,
                    )?;
                    let generator = entry.insert(generator);
                    crate::metrics::NUM_TOTAL_HISTORICAL_PRESIGNATURE_GENERATORS
                        .with_label_values(&[self.my_account_id.as_str()])
                        .inc();
                    Ok(&mut generator.protocol)
                }
                Entry::Occupied(entry) => Ok(&mut entry.into_mut().protocol),
            }
        }
    }

    /// Poke all ongoing presignature generation protocols to completion.
    pub async fn poke(&mut self) {
        let mut errors = Vec::new();
        let mut presignatures = Vec::new();

        let mut remove = Vec::new();
        for (id, generator) in self.generators.iter_mut() {
            loop {
                let action = match generator.poke() {
                    Ok(action) => action,
                    Err(e) => {
                        crate::metrics::PRESIGNATURE_GENERATOR_FAILURES
                            .with_label_values(&[self.my_account_id.as_str()])
                            .inc();
                        self.msg.filter_presignature(*id).await;
                        self.introduced.remove(id);
                        errors.push(e);
                        remove.push(*id);
                        break;
                    }
                };
                match action {
                    Action::Wait => {
                        tracing::debug!("presignature: waiting");
                        // Retain protocol until we are finished
                        break;
                    }
                    Action::SendMany(data) => {
                        for to in generator.participants.iter() {
                            if *to == self.me {
                                continue;
                            }
                            self.msg
                                .send(
                                    self.me,
                                    *to,
                                    PresignatureMessage {
                                        id: *id,
                                        triple0: generator.triple0,
                                        triple1: generator.triple1,
                                        epoch: self.epoch,
                                        from: self.me,
                                        data: data.clone(),
                                        timestamp: Utc::now().timestamp() as u64,
                                    },
                                )
                                .await;
                        }
                    }
                    Action::SendPrivate(to, data) => {
                        self.msg
                            .send(
                                self.me,
                                to,
                                PresignatureMessage {
                                    id: *id,
                                    triple0: generator.triple0,
                                    triple1: generator.triple1,
                                    epoch: self.epoch,
                                    from: self.me,
                                    data,
                                    timestamp: Utc::now().timestamp() as u64,
                                },
                            )
                            .await;
                    }
                    Action::Return(output) => {
                        tracing::info!(
                            id,
                            me = ?self.me,
                            big_r = ?output.big_r.to_base58(),
                            elapsed = ?generator.timestamp.elapsed(),
                            "completed presignature generation"
                        );
                        let presignature = Presignature {
                            id: *id,
                            output,
                            participants: generator.participants.clone(),
                        };
                        if generator.mine {
                            tracing::info!(id, "assigning presignature to myself");
                            crate::metrics::NUM_TOTAL_HISTORICAL_PRESIGNATURE_GENERATORS_MINE_SUCCESS
                                .with_label_values(&[self.my_account_id.as_str()])
                                .inc();
                        }
                        presignatures.push((presignature, generator.mine));
                        self.introduced.remove(id);

                        crate::metrics::PRESIGNATURE_LATENCY
                            .with_label_values(&[self.my_account_id.as_str()])
                            .observe(generator.timestamp.elapsed().as_secs_f64());
                        crate::metrics::NUM_TOTAL_HISTORICAL_PRESIGNATURE_GENERATORS_SUCCESS
                            .with_label_values(&[self.my_account_id.as_str()])
                            .inc();

                        self.msg.filter_presignature(*id).await;

                        // Do not retain the protocol
                        remove.push(*id);
                        break;
                    }
                }
            }
        }

        for id in remove {
            self.generators.remove(&id);
        }

        for (presignature, mine) in presignatures {
            self.insert(presignature, mine, false).await;
        }

        if !errors.is_empty() {
            tracing::warn!(?errors, "failed to generate some presignatures");
        }
    }

    pub fn execute(
        state: &RunningState,
        active: &[Participant],
        protocol_cfg: &ProtocolConfig,
    ) -> tokio::task::JoinHandle<()> {
        let triple_manager = state.triple_manager.clone();
        let presignature_manager = state.presignature_manager.clone();
        let active = active.to_vec();
        let protocol_cfg = protocol_cfg.clone();
        let pk = state.public_key;
        let sk_share = state.private_share;

        tokio::task::spawn(async move {
            let mut presignature_manager = presignature_manager.write().await;
            if let Err(err) = presignature_manager
                .stockpile(&active, &pk, &sk_share, &triple_manager, &protocol_cfg)
                .await
            {
                tracing::warn!(?err, "running: failed to stockpile presignatures");
            }
            presignature_manager.poke().await;

            crate::metrics::NUM_PRESIGNATURES_MINE
                .with_label_values(&[presignature_manager.my_account_id.as_str()])
                .set(presignature_manager.len_mine().await as i64);
            crate::metrics::NUM_PRESIGNATURES_TOTAL
                .with_label_values(&[presignature_manager.my_account_id.as_str()])
                .set(presignature_manager.len_generated().await as i64);
            crate::metrics::NUM_PRESIGNATURE_GENERATORS_TOTAL
                .with_label_values(&[presignature_manager.my_account_id.as_str()])
                .set(
                    presignature_manager.len_potential().await as i64
                        - presignature_manager.len_generated().await as i64,
                );
        })
    }
}

pub fn hash_as_id(triple0: TripleId, triple1: TripleId) -> PresignatureId {
    let mut hasher = Sha3_256::new();
    hasher.update(triple0.to_le_bytes());
    hasher.update(triple1.to_le_bytes());
    let id: [u8; 32] = hasher.finalize().into();
    let id = u64::from_le_bytes(first_8_bytes(id));

    PresignatureId::from(id)
}

const fn first_8_bytes(input: [u8; 32]) -> [u8; 8] {
    let mut output = [0u8; 8];
    let mut i = 0;
    while i < 8 {
        output[i] = input[i];
        i += 1;
    }
    output
}

#[cfg(test)]
mod tests {
    use cait_sith::{protocol::Participant, PresignOutput};
    use k256::{elliptic_curve::CurveArithmetic, Secp256k1};

    use crate::protocol::presignature::Presignature;

    #[tokio::test]
    async fn test_presignature_serialize_deserialize() {
        let presignature = Presignature {
            id: 1,
            output: PresignOutput {
                big_r: <Secp256k1 as CurveArithmetic>::AffinePoint::default(),
                k: <Secp256k1 as CurveArithmetic>::Scalar::ZERO,
                sigma: <Secp256k1 as CurveArithmetic>::Scalar::ONE,
            },
            participants: vec![Participant::from(1), Participant::from(2)],
        };

        // Serialize Presignature to JSON
        let serialized =
            serde_json::to_string(&presignature).expect("Failed to serialize Presignature");

        // Deserialize JSON back to Presignature
        let deserialized: Presignature =
            serde_json::from_str(&serialized).expect("Failed to deserialize Presignature");

        // Assert that the original and deserialized Presignature are equal
        assert_eq!(presignature.id, deserialized.id);
        assert_eq!(presignature.output.big_r, deserialized.output.big_r);
        assert_eq!(presignature.output.k, deserialized.output.k);
        assert_eq!(presignature.output.sigma, deserialized.output.sigma);
        assert_eq!(presignature.participants, deserialized.participants);
    }
}
